<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GitHub 教程</title>
    <link href="/2022/11/28/GitHub/"/>
    <url>/2022/11/28/GitHub/</url>
    
    <content type="html"><![CDATA[<p>笔记来源于</p><p><a href="http://player.bilibili.com/player.html?aid=98007542&bvid=BV1FE411P7B3&cid=167299076&page=9">http://player.bilibili.com/player.html?aid=98007542&bvid=BV1FE411P7B3&cid=167299076&page=9</a></p><h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1. 版本控制"></a>1. 版本控制</h1><p>什么是版本控制 ?</p><p>就是版本迭代</p><img src="http://pic.wxyh.top/202211281819067.png" alt="Untitled" style="zoom:50%;" /><p>上面的版本,很多,我们需要控制版本,如果直接像这样就非常的麻烦.</p><p>有什么用?</p><ul><li>实现多人协同开发</li><li>记录文件的历史记录</li><li>统计工具量,等</li></ul><p>常见的版本控制工具</p><ul><li><strong>Git (最流行的)</strong></li><li><strong>SVN</strong></li><li><strong>CVS</strong></li><li><strong>VSS</strong></li><li><strong>TFS</strong></li><li><strong>Visual Studio Online</strong></li></ul><h2 id="1-1-本地版本控制"><a href="#1-1-本地版本控制" class="headerlink" title="1.1 本地版本控制"></a>1.1 本地版本控制</h2><img src="http://pic.wxyh.top/202211281820193.png" alt="Untitled" style="zoom: 50%;" /><p>记录每次的版本更新,可以对每一次版本做一个快照,或是记录补丁文件,适合个人用,如 RCS.</p><h2 id="1-2-集中版本控制"><a href="#1-2-集中版本控制" class="headerlink" title="1.2 集中版本控制"></a>1.2 集中版本控制</h2><img src="http://pic.wxyh.top/202211281820195.png" alt="Untitled" style="zoom:33%;" /><p>所有的版本放在服务器上有个问题,如果 Cetntral VSC Server 如果出问题,那么所有的东西就会没了,这样是不利于我们的文件保存的.而且是需要联网什么的,服务器一坏,所有东西就会没了 !!!</p><p>代表性产品: SNV, CVS, VSS</p><h2 id="1-3-分布式版本控制-Git"><a href="#1-3-分布式版本控制-Git" class="headerlink" title="1.3  分布式版本控制 Git"></a>1.3  分布式版本控制 Git</h2><img src="http://pic.wxyh.top/202211281820196.png" alt="Untitled" style="zoom: 50%;" /><p>每个人都有全部的代码,好处就是本地就可以看到所有版本信息.所有人都是一个版本,不会因为一个版本损坏,或者服务器损坏,导致不能工作.</p><p>Git 和 SVN 最主要的区别?</p><p>一个是分布式, 一个是集中管理</p><h1 id="2-Git-历史"><a href="#2-Git-历史" class="headerlink" title="2. Git 历史"></a>2. Git 历史</h1><img src="http://pic.wxyh.top/202211281820197.png" alt="Linux和Git之父李纳斯;托沃兹( Linus Benedic Torvalds ) 1969 芬兰" style="zoom: 50%;" /><p>Linux和Git之父李纳斯;托沃兹( Linus Benedic Torvalds ) 1969 芬兰</p><p>Linux 作者两周开发的!!</p><h1 id="3-Git-的下载和安装"><a href="#3-Git-的下载和安装" class="headerlink" title="3. Git 的下载和安装"></a>3. Git 的下载和安装</h1><p>下面是 Git 官网, 去下载就行了.</p><p><a href="https://git-scm.com/">Git</a></p><p>下载慢可以找国内的镜像, </p><h1 id="4-Git-的配置"><a href="#4-Git-的配置" class="headerlink" title="4. Git 的配置"></a>4. Git 的配置</h1><h2 id="4-1-Git-的相关配置"><a href="#4-1-Git-的相关配置" class="headerlink" title="4.1 Git 的相关配置"></a>4.1 Git 的相关配置</h2><p>查看系统 config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --system --list<br></code></pre></td></tr></table></figure><p>查看当前用户(global) 配置 ,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global --list<br></code></pre></td></tr></table></figure><img src="http://pic.wxyh.top/202211281820199.png" alt="Untitled" style="zoom:50%;" /><p>这里是配置了 <strong>用户名</strong> 和 <strong>密码</strong> ,告诉你是谁提交了.</p><p>所有的配置文件,都保存在本地,</p><h2 id="4-2-Git-的配置"><a href="#4-2-Git-的配置" class="headerlink" title="4.2 Git 的配置"></a>4.2 Git 的配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;wxyhgk&quot;</span> <span class="hljs-comment"># 名称</span><br>git config --global user.email 3123624718@qq.com <span class="hljs-comment"># 邮箱</span><br></code></pre></td></tr></table></figure><h1 id="5-Git-的工作原理-核心"><a href="#5-Git-的工作原理-核心" class="headerlink" title="5. Git 的工作原理(核心)"></a>5. Git 的工作原理(核心)</h1><img src="http://pic.wxyh.top/202211281820200.png" alt="Untitled" style="zoom:50%;" /><ul><li><strong>工作目录</strong> 就是平时存放项目代码的地方</li><li><strong>暂存区</strong> 临时存放你的改动,<em>事实上它只是一个文件</em></li><li><strong>本地历史</strong> 仓库区,就是安全存放数据的位置,这里有你提交所有版本的数据</li><li><strong>远程仓库</strong> 托管代码的服务器,可以简单认为是你项目组中的一台电脑用于远程数据交换</li></ul><h1 id="6-Git-项目搭建"><a href="#6-Git-项目搭建" class="headerlink" title="6. Git 项目搭建"></a>6. Git 项目搭建</h1><p>工作目录( workspace )一般就是你希望 Git 帮助你管理的文件夹, 可以是你的项目的目录, 也可以是一个空目录, 最好不要有中文.</p><p><img src="http://pic.wxyh.top/202211281820201.png" alt="Untitled"></p><h2 id="6-1-本地仓库搭建"><a href="#6-1-本地仓库搭建" class="headerlink" title="6.1 本地仓库搭建"></a>6.1 本地仓库搭建</h2><p>初始化当前项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h2 id="6-2-克隆远程仓库"><a href="#6-2-克隆远程仓库" class="headerlink" title="6.2 克隆远程仓库"></a>6.2 克隆远程仓库</h2><ol><li>克隆远程目录到本地,由于是将远程无服务器上的远程服务器上的仓库完全镜像一份到本地!</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> github的链接<br></code></pre></td></tr></table></figure><ol><li>去 gitee 或者 GitHub 上克隆一个测试</li></ol><h1 id="7-Git-文件操作"><a href="#7-Git-文件操作" class="headerlink" title="7. Git 文件操作"></a>7. Git 文件操作</h1><h2 id="7-1-文件四种状态"><a href="#7-1-文件四种状态" class="headerlink" title="7.1 文件四种状态"></a>7.1 文件四种状态</h2><ul><li><strong>Untracked</strong> 未跟踪,此文件在文件夹中,但没有加入到 git 库, 不参与版本控制.<br>通过 <code>git add</code> 状态变成 <strong>Staged</strong></li><li><strong>Unmodify</strong> 文件已经入库,未修改,即版本库中的文件快照内容和文件夹中完全一致,这种类型的文件有两种去处</li></ul><ol><li>如果被修改, 而变成 <strong>Modified</strong> </li><li>如果使用 <code>git rm</code> 移出版本库, 则变成 <strong>Untracked</strong> 文件</li></ol><ul><li><strong>Modifiled</strong> 文件已修改,仅仅是修改,没有进行其他操作,这个这个文件也有两个去处</li></ul><ol><li>通过 <code>git add</code> 可以进入暂存 <strong>staged</strong> 状态</li><li>使用 <code>git checkout</code> 则丢弃修改过,回到 Unmodify 状态,这个 <code>git checkout</code> 即从库中取出文件, 覆盖当前修改!</li></ol><ul><li><strong>Staged</strong> 暂存状态,</li></ul><ol><li>执行 <code>git commit</code> 则将修改同步到库中,这时库中的文件和本地文件又变为一致,文件为 <strong>Unmodify</strong> 状态,</li><li>执行 <code>git reset HEAD filename</code> 取消暂存,文件状态变为 <strong>Modified</strong></li></ol><h2 id="7-2-查看文件状态"><a href="#7-2-查看文件状态" class="headerlink" title="7.2 查看文件状态"></a>7.2 查看文件状态</h2><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看指定文件状态</span><br>git status filename<br><br><span class="hljs-comment"># 查看所有文件状态</span><br>git status<br><br><span class="hljs-comment"># 添加所有文件到暂存区</span><br>git add .<br><br><span class="hljs-comment"># 提交暂存区的内容到本地仓库 -m 提交信息</span><br>git commit -m <span class="hljs-string">&quot;内容&quot;</span><br><br><span class="hljs-comment"># 将文件上传到远程仓库</span><br><span class="hljs-comment"># 以下命令将本地的 master 分支推送到 origin 主机的 master 分支。</span><br>git push origin master<br></code></pre></td></tr></table></figure><h2 id="7-3-忽略文件"><a href="#7-3-忽略文件" class="headerlink" title="7.3 忽略文件"></a>7.3 忽略文件</h2><p>有时候我们并不想将所有文件都提交上去, 某些文件我们不想提交上去, 比如以 <code>.chk</code> 结尾的文件我们不想提交上去怎么办呢?</p><p>在主目录下建立一个 <code>.gitignore</code> 文件, 此文件可以填入以下规则</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">*.txt     <span class="hljs-comment"># 忽略所有 .txt 结尾的文件</span><br>!lib.txt  <span class="hljs-comment"># lib.txt 除外</span><br>\temp.    <span class="hljs-comment"># 往上忽略, 仅忽略项目目录下的 TODO 文件, 不包括其他目录 temp</span><br>build<span class="hljs-regexp">/    # 往下忽略,忽略 build/</span> 目录下的所有文件<br>doc<span class="hljs-regexp">/*.txt # 会忽略 doc/</span>notes.txt 但不包括 doc<span class="hljs-regexp">/server/</span>arch.txt <br></code></pre></td></tr></table></figure><h2 id="7-4-实战"><a href="#7-4-实战" class="headerlink" title="7.4 实战"></a>7.4 实战</h2><h3 id="1-查看所有文件状态"><a href="#1-查看所有文件状态" class="headerlink" title="1. 查看所有文件状态"></a>1. <strong>查看所有文件状态</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><p><img src="http://pic.wxyh.top/202211281820202.png" alt="Untitled"></p><h3 id="2-git-add-状态变成Staged"><a href="#2-git-add-状态变成Staged" class="headerlink" title="2. git add 状态变成Staged"></a>2. <strong>git add 状态变成Staged</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 通过 git add 状态变成 **Staged**</span><br>git add .<br><br><span class="hljs-comment"># 再次查看所有文件状态</span><br>git status<br></code></pre></td></tr></table></figure><p><img src="http://pic.wxyh.top/202211281820203.png" alt="Untitled"></p><h3 id="3-提交到本地仓库"><a href="#3-提交到本地仓库" class="headerlink" title="3. 提交到本地仓库"></a>3. 提交到本地仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 提交到本地仓库</span><br>git commit -m <span class="hljs-string">&quot;ceshitijiao&quot;</span><br></code></pre></td></tr></table></figure><p><img src="http://pic.wxyh.top/202211281820204.png" alt="Untitled"></p><h2 id="7-5-使用-GitHub-或-Gitee"><a href="#7-5-使用-GitHub-或-Gitee" class="headerlink" title="7.5 使用 GitHub 或 Gitee"></a>7.5 使用 GitHub 或 Gitee</h2><ol><li><p>注册 GitHub 或 Gitee 完善个人信息</p><p> <a href="https://github.com/">GitHub: Let’s build from here</a></p><p> <a href="https://gitee.com/">Gitee - 基于 Git 的代码托管和研发协作平台</a></p></li><li><p>设置本级 SSH 公钥,实现免密登录(重要步骤)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen<br></code></pre></td></tr></table></figure></li><li><p>将公钥信息 public key 添加到 GitHub 账户中即可</p><p> <img src="http://pic.wxyh.top/202211281820205.png" alt="Untitled"></p><p> <img src="http://pic.wxyh.top/202211281820206.png" alt="Untitled"></p><p> <img src="http://pic.wxyh.top/202211281820207.png" alt="Untitled"></p></li></ol><h1 id="8-Git-分支说明"><a href="#8-Git-分支说明" class="headerlink" title="8. Git 分支说明"></a>8. Git 分支说明</h1><h2 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h2><p>上面的都是个人操作, 不是协同, 我们需要使用分支来做, GitHub 分支比较重要, 也比较难.</p><p>下面这个 GitHub 项目就有很多分支, 可以看到</p><img src="http://pic.wxyh.top/202211281820208.png" alt="Untitled" style="zoom:33%;" /><h2 id="8-2-git-中常用的分支命令"><a href="#8-2-git-中常用的分支命令" class="headerlink" title="8.2 git 中常用的分支命令"></a>8.2 git 中常用的分支命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出所有本地分支</span><br>git branch<br><br><span class="hljs-comment"># 列出所有远程分支</span><br>git branch -r<br><br><span class="hljs-comment"># 新建一个分支, 但依旧停留在当前分支</span><br>git branch 分支名字<br><br><span class="hljs-comment"># 新建一个分支,并切换到该分支</span><br>git checkout -b 分支<br><br><span class="hljs-comment"># 合并分支到当前分支</span><br>git merge 分支<br><br><span class="hljs-comment"># 删除分支</span><br>git branch -d 分支名字<br><br><span class="hljs-comment"># 删除远程分支</span><br>git push origin --delete 分支名字<br>git branch -dr remote/branch<br></code></pre></td></tr></table></figure><img src="http://pic.wxyh.top/202211281820209.png" alt="Untitled" style="zoom: 50%;" /><h1 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h1><p><a href="GitHub%20%E6%95%99%E7%A8%8B%20b304912567ec403fbfff8c9802cccf5f/GitHub%25E6%2595%2599%25E7%25A8%258B.dio">GitHub教程.dio</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hello</title>
    <link href="/2022/11/27/test/"/>
    <url>/2022/11/27/test/</url>
    
    <content type="html"><![CDATA[<p>fsadfffffffffffffffffff<br>fsdfasfsa</p><p>测试不断测试记过</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/27/hello-world/"/>
    <url>/2022/11/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>测试不断测试记过</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
